
# Setting Up an Express.js Backend for Epiphany Scientific Club Website

This guide will help you set up an Express.js backend server that can be connected to your React front-end application.

## Prerequisites

- Node.js (v14 or later)
- npm or yarn
- MongoDB (local installation or MongoDB Atlas account)

## Step 1: Create a new directory for your backend

```bash
mkdir epiphany-backend
cd epiphany-backend
npm init -y
```

## Step 2: Install required dependencies

```bash
npm install express mongoose cors dotenv
npm install --save-dev nodemon
```

## Step 3: Create the project structure

```
epiphany-backend/
├── config/
│   └── db.js
├── controllers/
│   ├── blogController.js
│   ├── eventController.js
│   └── newsController.js
├── models/
│   ├── Blog.js
│   ├── Event.js
│   └── News.js
├── routes/
│   ├── blogRoutes.js
│   ├── eventRoutes.js
│   └── newsRoutes.js
├── .env
├── server.js
└── package.json
```

## Step 4: Configure environment variables

Create a `.env` file in the root directory:

```
PORT=3001
MONGODB_URI=mongodb+srv://yourusername:yourpassword@yourcluster.mongodb.net/epiphany
NODE_ENV=development
```

Remember to replace the MongoDB URI with your actual connection string.

## Step 5: Set up MongoDB connection

Create `config/db.js`:

```javascript
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(`Error: ${error.message}`);
    process.exit(1);
  }
};

module.exports = connectDB;
```

## Step 6: Create MongoDB Models

### News Model (models/News.js)

```javascript
const mongoose = require('mongoose');

const newsSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  content: {
    type: String,
    required: true
  },
  excerpt: {
    type: String,
    required: true
  },
  publishedDate: {
    type: String,
    required: true
  },
  image: {
    type: String,
    required: true
  },
  category: {
    type: String,
    required: true
  },
  author: {
    type: String,
    required: true
  }
}, {
  timestamps: true
});

const News = mongoose.model('News', newsSchema);

module.exports = News;
```

### Blog Model (models/Blog.js)

```javascript
const mongoose = require('mongoose');

const blogSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  content: {
    type: String,
    required: true
  },
  excerpt: {
    type: String,
    required: true
  },
  publishedDate: {
    type: String,
    required: true
  },
  image: {
    type: String,
    required: true
  },
  author: {
    name: {
      type: String,
      required: true
    },
    avatar: {
      type: String,
      required: true
    }
  },
  status: {
    type: String,
    required: true,
    default: 'Published'
  },
  tags: {
    type: [String],
    required: true
  },
  readTime: {
    type: String,
    required: true
  },
  commentCount: {
    type: Number,
    required: true,
    default: 0
  }
}, {
  timestamps: true
});

const Blog = mongoose.model('Blog', blogSchema);

module.exports = Blog;
```

### Event Model (models/Event.js)

```javascript
const mongoose = require('mongoose');

const eventSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  date: {
    type: String,
    required: true
  },
  time: {
    type: String,
    required: true
  },
  location: {
    type: String,
    required: true
  },
  attendeeCount: {
    type: Number,
    required: true,
    default: 0
  },
  maxAttendees: {
    type: Number,
    required: true
  },
  image: {
    type: String,
    required: true
  },
  category: {
    type: String,
    required: true
  },
  status: {
    type: String,
    required: true,
    default: 'Upcoming'
  }
}, {
  timestamps: true
});

const Event = mongoose.model('Event', eventSchema);

module.exports = Event;
```

## Step 7: Create Controllers

### News Controller (controllers/newsController.js)

```javascript
const News = require('../models/News');

// Get all news
const getNews = async (req, res) => {
  try {
    const news = await News.find().sort({ publishedDate: -1 });
    res.json(news);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get news by ID
const getNewsById = async (req, res) => {
  try {
    const news = await News.findById(req.params.id);
    if (news) {
      res.json(news);
    } else {
      res.status(404).json({ message: 'News article not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Create news
const createNews = async (req, res) => {
  try {
    const news = new News(req.body);
    const createdNews = await news.save();
    res.status(201).json(createdNews);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Update news
const updateNews = async (req, res) => {
  try {
    const news = await News.findById(req.params.id);
    if (news) {
      Object.assign(news, req.body);
      const updatedNews = await news.save();
      res.json(updatedNews);
    } else {
      res.status(404).json({ message: 'News article not found' });
    }
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Delete news
const deleteNews = async (req, res) => {
  try {
    const news = await News.findById(req.params.id);
    if (news) {
      await news.deleteOne();
      res.json({ message: 'News article removed' });
    } else {
      res.status(404).json({ message: 'News article not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

module.exports = {
  getNews,
  getNewsById,
  createNews,
  updateNews,
  deleteNews
};
```

Create similar controllers for Blogs and Events.

## Step 8: Create Routes

### News Routes (routes/newsRoutes.js)

```javascript
const express = require('express');
const router = express.Router();
const {
  getNews,
  getNewsById,
  createNews,
  updateNews,
  deleteNews
} = require('../controllers/newsController');

router.route('/').get(getNews).post(createNews);
router.route('/:id').get(getNewsById).put(updateNews).delete(deleteNews);

module.exports = router;
```

Create similar route files for Blogs and Events.

## Step 9: Set up the Express server (server.js)

```javascript
const express = require('express');
const dotenv = require('dotenv');
const cors = require('cors');
const connectDB = require('./config/db');

// Load environment variables
dotenv.config();

// Connect to the database
connectDB();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/news', require('./routes/newsRoutes'));
app.use('/api/blogs', require('./routes/blogRoutes'));
app.use('/api/events', require('./routes/eventRoutes'));

// Basic route
app.get('/', (req, res) => {
  res.send('API is running...');
});

// Error handling middleware
app.use((err, req, res, next) => {
  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  res.status(statusCode);
  res.json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? null : err.stack,
  });
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

## Step 10: Update package.json scripts

```json
"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}
```

## Step 11: Run the server

```bash
npm run dev
```

## Step 12: Connect Your React Frontend

Make sure your frontend API calls are pointing to your Express backend URL:

```
http://localhost:3001/api/news
http://localhost:3001/api/blogs
http://localhost:3001/api/events
```

## Step 13: Authentication (Optional)

For a more secure application, you might want to implement authentication using JWT (JSON Web Tokens) or a third-party service like Auth0.

## Step 14: Deployment

For production, consider deploying your backend to:
- Heroku
- Vercel
- DigitalOcean
- AWS
- Google Cloud

Remember to set your environment variables on your hosting platform.

## Step 15: CORS Configuration (Production)

In production, you should configure CORS to only accept requests from your frontend domain:

```javascript
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? 'https://your-frontend-domain.com' 
    : 'http://localhost:3000'
}));
```

## Additional Considerations

1. **File Uploads**: Consider using Multer for handling file uploads, or a service like AWS S3 for storing images.
2. **Pagination**: Implement pagination for large datasets.
3. **Rate Limiting**: Add rate limiting to prevent abuse.
4. **Logging**: Implement proper logging with a library like Winston.
5. **Testing**: Set up testing with Jest or Mocha.

This setup provides a solid foundation for your Express.js backend that can easily connect with your React frontend.
